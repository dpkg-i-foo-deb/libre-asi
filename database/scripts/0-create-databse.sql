-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.address
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    address character varying(200) COLLATE pg_catalog."default" NOT NULL,
    city integer NOT NULL,
    person integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    is_main boolean NOT NULL,
    CONSTRAINT address_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.administrator
(
    id integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT administrator_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.city
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    state integer,
    CONSTRAINT city_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.city_translations
(
    city integer,
    language character varying(8) COLLATE pg_catalog."default" NOT NULL,
    is_default boolean NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT city_translations_pkey PRIMARY KEY (language, city)
);

CREATE TABLE IF NOT EXISTS public.country
(
    country character varying(15) COLLATE pg_catalog."default" NOT NULL,
    region character varying(15) COLLATE pg_catalog."default" NOT NULL,
    indicative smallint NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT country_pkey PRIMARY KEY (country)
);

CREATE TABLE IF NOT EXISTS public.country_translations
(
    country character varying(15) COLLATE pg_catalog."default",
    language character varying(8) COLLATE pg_catalog."default" NOT NULL,
    is_default boolean NOT NULL,
    country_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT country_translations_pkey PRIMARY KEY (country_name)
);

CREATE TABLE IF NOT EXISTS public.phone
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "number" integer NOT NULL,
    person integer NOT NULL,
    country character varying(15) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT phone_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.region
(
    region character varying(15) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT region_pkey PRIMARY KEY (region)
);

CREATE TABLE IF NOT EXISTS public.region_translations
(
    region character varying(15) COLLATE pg_catalog."default",
    language character varying(8) COLLATE pg_catalog."default" NOT NULL,
    is_default boolean NOT NULL,
    region_name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT region_translations_pkey PRIMARY KEY (language, region)
);

CREATE TABLE IF NOT EXISTS public.state
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    country character varying(15) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT state_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.state_translations
(
    state integer NOT NULL,
    language character varying(8) COLLATE pg_catalog."default" NOT NULL,
    is_default boolean NOT NULL,
    name character varying(100) COLLATE pg_catalog."default",
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT state_translations_pkey PRIMARY KEY (state, language)
);

CREATE TABLE IF NOT EXISTS public."user"
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    email character varying(255) COLLATE pg_catalog."default" NOT NULL,
    username character varying(255) COLLATE pg_catalog."default" NOT NULL,
    password character varying(255) COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    CONSTRAINT user_pkey PRIMARY KEY (id),
    CONSTRAINT email_un UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.person
(
    id integer,
    first_name character varying(100) NOT NULL,
    second_name character varying(100),
    first_surname character varying(100),
    second_surname character varying(100),
    age smallint,
    birthdate date NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.patient
(
    id integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    social_security_number character varying(100),
    race character varying(15),
    religious_preference character varying(25),
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.status
(
    status character varying(20),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (status)
);

CREATE TABLE IF NOT EXISTS public.race
(
    race character varying(15),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (race)
);

CREATE TABLE IF NOT EXISTS public.race_translation
(
    race character varying(15),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    race_name character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (race_name, language)
);

CREATE TABLE IF NOT EXISTS public.religious_preference
(
    preference character varying(25),
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    PRIMARY KEY (preference)
);

CREATE TABLE IF NOT EXISTS public.religious_preference_translation
(
    preference character varying(25),
    language character varying(8) NOT NULL,
    preference_description character varying(100) NOT NULL,
    is_default boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (preference_description, language)
);

CREATE TABLE IF NOT EXISTS public.attendant
(
    person integer,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (person)
);

CREATE TABLE IF NOT EXISTS public.attendance_type
(
    attendance_type character varying(25),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (attendance_type)
);

CREATE TABLE IF NOT EXISTS public.attendance_type_translations
(
    attendance_type character varying(25),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    attendance_type_name character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (attendance_type_name, language)
);

CREATE TABLE IF NOT EXISTS public.profession
(
    profession character varying(25),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (profession)
);

CREATE TABLE IF NOT EXISTS public.profession_translation
(
    profession character varying(25),
    language character varying(8) NOT NULL,
    profession_name character varying(100) NOT NULL,
    is_default boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (profession_name, language)
);

CREATE TABLE IF NOT EXISTS public.interviewer
(
    person integer,
    "RMA" character varying(200) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    profession character varying(25) NOT NULL,
    PRIMARY KEY (person)
);

CREATE TABLE IF NOT EXISTS public.hollingshead_occupation
(
    occupation character varying(50),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (occupation)
);

CREATE TABLE IF NOT EXISTS public.hollingshead_occupation_translations
(
    occupation character varying,
    language character varying(8) NOT NULL,
    occupation_name character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (occupation_name, language)
);

CREATE TABLE IF NOT EXISTS public.drug_category
(
    category character varying(50),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (category)
);

CREATE TABLE IF NOT EXISTS public.drug_category_translation
(
    drug_category character varying(50),
    language character varying(8) NOT NULL,
    drug_category_name character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (drug_category_name, language)
);

CREATE TABLE IF NOT EXISTS public.drug
(
    name character varying(50),
    category character varying(50) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (name)
);

CREATE TABLE IF NOT EXISTS public.drug_translations
(
    drug character varying(50),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    drug_name character varying(100),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (drug_name, language)
);

CREATE TABLE IF NOT EXISTS public.housing_arrangement
(
    type character varying(20),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (type)
);

CREATE TABLE IF NOT EXISTS public.housing_arrangement_translations
(
    type character varying(20),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    type_name character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (type_name, language)
);

CREATE TABLE IF NOT EXISTS public.family_type
(
    type character varying(20),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (type)
);

CREATE TABLE IF NOT EXISTS public.family_type_translations
(
    type character varying(20),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    type_text character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (type_text, language)
);

CREATE TABLE IF NOT EXISTS public.marital_status
(
    marital_status character varying(20),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (marital_status)
);

CREATE TABLE IF NOT EXISTS public.marital_status_translations
(
    marital_status character varying(20),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    marital_status_text character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (marital_status_text, language)
);

CREATE TABLE IF NOT EXISTS public.interviewer_scale
(
    value smallint,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (value)
);

CREATE TABLE IF NOT EXISTS public.interviewer_scale_translations
(
    value smallint,
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    description character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (value)
);

CREATE TABLE IF NOT EXISTS public.patient_scale
(
    value smallint,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (value)
);

CREATE TABLE IF NOT EXISTS public.patient_scale_translations
(
    value smallint,
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    description character varying(100) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (value, language)
);

CREATE TABLE IF NOT EXISTS public.interview
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    start_date timestamp with time zone NOT NULL,
    end_date timestamp with time zone,
    paused_at timestamp with time zone,
    resumed_at timestamp with time zone,
    attendance_type character varying(25) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    patient integer NOT NULL,
    interviewer integer NOT NULL,
    asi_form integer NOT NULL,
    language character varying(8) NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.interview_attendant
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    interview bigint NOT NULL,
    attendant integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT interview_attendant_un UNIQUE (interview, attendant)
);

CREATE TABLE IF NOT EXISTS public.addiction_severity_index_form
(
    id integer NOT NULL GENERATED ALWAYS AS IDENTITY,
    edition character varying(20) NOT NULL,
    version smallint NOT NULL,
    authors character varying(255) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.addiction_severity_index_form_translations
(
    id smallint,
    language character varying(8) NOT NULL,
    title character varying(100) NOT NULL,
    description character varying(255) NOT NULL,
    is_default boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id, language)
);

CREATE TABLE IF NOT EXISTS public.question_category
(
    category character varying(8),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (category)
);

CREATE TABLE IF NOT EXISTS public.question_category_translations
(
    category character varying(8),
    language character varying(8) NOT NULL,
    is_default boolean NOT NULL,
    category_name character varying(100) NOT NULL,
    description character varying(200),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (category, language)
);

CREATE TABLE IF NOT EXISTS public.question
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    "order" integer NOT NULL,
    category character varying(8) NOT NULL,
    question_type character varying(10) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.question_type
(
    type character varying(10),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (type)
);

CREATE TABLE IF NOT EXISTS public.question_asi_form
(
    asi_form integer,
    question bigint,
    created_at timestamp with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    PRIMARY KEY (asi_form, question)
);

CREATE TABLE IF NOT EXISTS public.question_translations
(
    question bigint,
    language character varying(8),
    is_default boolean NOT NULL,
    statement character varying(255) NOT NULL,
    simplified_statement character varying(255),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (question, language)
);

CREATE TABLE IF NOT EXISTS public.option
(
    question bigint,
    language character varying(8),
    "order" smallint,
    description character varying(255) NOT NULL,
    simplified_description character varying(255),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (question, language, "order")
);

CREATE TABLE IF NOT EXISTS public.question_help
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    question bigint NOT NULL,
    language character varying(8) NOT NULL,
    example text,
    help text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.option_help
(
    id bigint NOT NULL GENERATED ALWAYS AS IDENTITY,
    question bigint NOT NULL,
    language character varying(8) NOT NULL,
    "order" smallint NOT NULL,
    example text,
    help text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.interview_answer
(
    interview bigint NOT NULL,
    question bigint NOT NULL,
    language character varying(8) NOT NULL,
    "order" smallint NOT NULL,
    answer character varying(2),
    commentary text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    PRIMARY KEY (interview)
);

ALTER TABLE IF EXISTS public.address
    ADD CONSTRAINT city_fk FOREIGN KEY (city)
    REFERENCES public.city (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.address
    ADD CONSTRAINT person_fk FOREIGN KEY (person)
    REFERENCES public.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.administrator
    ADD CONSTRAINT user_fk FOREIGN KEY (id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS administrator_pkey
    ON public.administrator(id);


ALTER TABLE IF EXISTS public.city
    ADD CONSTRAINT state_fk FOREIGN KEY (state)
    REFERENCES public.state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS city_pkey
    ON public.city(state);


ALTER TABLE IF EXISTS public.city_translations
    ADD CONSTRAINT city_fk FOREIGN KEY (city)
    REFERENCES public.city (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.country
    ADD CONSTRAINT region_fk FOREIGN KEY (region)
    REFERENCES public.region (region) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.country_translations
    ADD CONSTRAINT country_fk FOREIGN KEY (country)
    REFERENCES public.country (country) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT country_fk FOREIGN KEY (country)
    REFERENCES public.country (country) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.phone
    ADD CONSTRAINT person_fk FOREIGN KEY (person)
    REFERENCES public.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.region_translations
    ADD CONSTRAINT region_fk FOREIGN KEY (region)
    REFERENCES public.region (region) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.state
    ADD CONSTRAINT country_fk FOREIGN KEY (country)
    REFERENCES public.country (country) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.state_translations
    ADD CONSTRAINT state_fk FOREIGN KEY (state)
    REFERENCES public.state (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS state_translations_pkey
    ON public.state_translations(state);


ALTER TABLE IF EXISTS public.person
    ADD CONSTRAINT user_fk FOREIGN KEY (id)
    REFERENCES public."user" (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT person_fk FOREIGN KEY (id)
    REFERENCES public.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT race_fk FOREIGN KEY (race)
    REFERENCES public.race (race) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient
    ADD CONSTRAINT religious_preference_fk FOREIGN KEY (religious_preference)
    REFERENCES public.religious_preference (preference) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.race_translation
    ADD CONSTRAINT race_fk FOREIGN KEY (race)
    REFERENCES public.race (race) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.religious_preference_translation
    ADD CONSTRAINT religious_preference_fk FOREIGN KEY (preference)
    REFERENCES public.religious_preference (preference) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.attendant
    ADD CONSTRAINT person_fk FOREIGN KEY (person)
    REFERENCES public.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.attendance_type_translations
    ADD CONSTRAINT attendance_type_fk FOREIGN KEY (attendance_type)
    REFERENCES public.attendance_type (attendance_type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.profession_translation
    ADD CONSTRAINT profession_fk FOREIGN KEY (profession)
    REFERENCES public.profession (profession) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interviewer
    ADD CONSTRAINT person_fk FOREIGN KEY (person)
    REFERENCES public.person (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interviewer
    ADD CONSTRAINT profession FOREIGN KEY (profession)
    REFERENCES public.profession (profession) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.hollingshead_occupation_translations
    ADD CONSTRAINT occupation_fk FOREIGN KEY (occupation)
    REFERENCES public.hollingshead_occupation (occupation) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.drug_category_translation
    ADD CONSTRAINT drug_fk FOREIGN KEY (drug_category)
    REFERENCES public.drug_category (category) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.drug
    ADD CONSTRAINT category_fk FOREIGN KEY (category)
    REFERENCES public.drug_category (category) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.drug_translations
    ADD CONSTRAINT drug_fk FOREIGN KEY (drug)
    REFERENCES public.drug (name) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.housing_arrangement_translations
    ADD CONSTRAINT housing_fk FOREIGN KEY (type)
    REFERENCES public.housing_arrangement (type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.family_type_translations
    ADD CONSTRAINT family_fk FOREIGN KEY (type)
    REFERENCES public.family_type (type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.marital_status_translations
    ADD CONSTRAINT marital_status_fk FOREIGN KEY (marital_status)
    REFERENCES public.marital_status (marital_status) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interviewer_scale_translations
    ADD CONSTRAINT interviewer_scale_fk FOREIGN KEY (value)
    REFERENCES public.interviewer_scale (value) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.patient_scale_translations
    ADD CONSTRAINT patient_scale_fk FOREIGN KEY (value)
    REFERENCES public.patient_scale (value) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview
    ADD CONSTRAINT attendance_type_fk FOREIGN KEY (attendance_type)
    REFERENCES public.attendance_type (attendance_type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview
    ADD CONSTRAINT patient_fk FOREIGN KEY (patient)
    REFERENCES public.patient (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview
    ADD CONSTRAINT interviewer_fk FOREIGN KEY (interviewer)
    REFERENCES public.interviewer (person) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview
    ADD CONSTRAINT asi_form_fk FOREIGN KEY (asi_form, language)
    REFERENCES public.addiction_severity_index_form_translations (id, language) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview_attendant
    ADD CONSTRAINT attendant_fk FOREIGN KEY (attendant)
    REFERENCES public.attendant (person) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview_attendant
    ADD CONSTRAINT interview_fk FOREIGN KEY (interview)
    REFERENCES public.interview (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.addiction_severity_index_form_translations
    ADD CONSTRAINT asi_form_fk FOREIGN KEY (id)
    REFERENCES public.addiction_severity_index_form (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question_category_translations
    ADD CONSTRAINT question_category_fk FOREIGN KEY (category)
    REFERENCES public.question_category (category) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question
    ADD CONSTRAINT category_fk FOREIGN KEY (category)
    REFERENCES public.question_category (category) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question
    ADD CONSTRAINT type_fk FOREIGN KEY (question_type)
    REFERENCES public.question_type (type) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question_asi_form
    ADD CONSTRAINT asi_form_fk FOREIGN KEY (asi_form)
    REFERENCES public.addiction_severity_index_form (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question_asi_form
    ADD CONSTRAINT question_fk FOREIGN KEY (question)
    REFERENCES public.question (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question_translations
    ADD CONSTRAINT question_fk FOREIGN KEY (question)
    REFERENCES public.question (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.option
    ADD CONSTRAINT question_fk FOREIGN KEY (question, language)
    REFERENCES public.question_translations (question, language) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.question_help
    ADD CONSTRAINT question_fk FOREIGN KEY (question, language)
    REFERENCES public.question_translations (question, language) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.option_help
    ADD CONSTRAINT option_fk FOREIGN KEY (question, language, "order")
    REFERENCES public.option (question, language, "order") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview_answer
    ADD CONSTRAINT interview_fk FOREIGN KEY (interview)
    REFERENCES public.interview (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.interview_answer
    ADD CONSTRAINT option_fk FOREIGN KEY (question, language, "order")
    REFERENCES public.option (question, language, "order") MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;
